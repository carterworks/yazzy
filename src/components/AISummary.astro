---
import { cache } from "../services/cache";
import { summarize } from "../services/summarizer";
import type { ReadablePage } from "../types";

interface Props {
	article: ReadablePage;
	class?: string;
}
const { article, class: propClasses = "" } = Astro.props;

const authCookie = Astro.cookies.get("Authorization");
let apiErrorMsg = "";
if (!article.summary && authCookie) {
	const [model, apiKey] = (atob(authCookie.value) || "=").split("=");
	if (!model || !apiKey) {
		return;
	}
	try {
		article.summary = await summarize(article.textContent, model, apiKey);
		if (article.summary) {
			cache.addSummary(article.url, article.summary);
		}
	} catch (error) {
		if (error instanceof Error) {
			apiErrorMsg = error.message;
		} else if (typeof error === "string") {
			apiErrorMsg = error;
		} else {
			apiErrorMsg = `Unknown error: ${error}`;
		}
	}
}
---

{
	apiErrorMsg && (
		<div
			class:list={[
				"bg-slate-100",
				"dark:bg-gray-700",
				"rounded",
				"px-4",
				"py-2",
				propClasses,
			]}
		>
			<h3 class="font-bold">Failed to retrieve AI summary</h3>
			<p class="">{apiErrorMsg}</p>
		</div>
	)
}
{
	!apiErrorMsg && article.summary && (
		<aside class="prose dark:prose-invert font-humanist mt-2 ">
			<h3 class="mb-0 font-transitional">Summary</h3>
			<div set:html={article.summary} class="*:my-0" />
		</aside>
	)
}
