---
interface LinkProps {
	href: string;
}
interface ButtonProps {
	type: "button" | "submit" | "reset";
}
interface CommonProps {
	class?: string;
	[key: string]: unknown;
}
type Props = (LinkProps | ButtonProps) & CommonProps;
const { props } = Astro;
function isLink(props: Props): props is LinkProps & CommonProps {
	return Boolean((props as LinkProps).href);
}
const classes = [
	"border",
	"py-1",
	"px-2",
	"rounded-lg",
	"transition",
	"text-center",
	"bg-canvas",
	"hover:brightness-95",
	"dark:hover:brightness-125",
	"active:brightness-105",
	"dark:active:brightness-90",
] as const;
---

{
	isLink(props) && (
		<a class:list={[...classes, props.class]} {...props}>
			<slot />
		</a>
	)
}
{
	!isLink(props) && (
		<button class:list={[...classes, props.class]} {...props}>
			<slot />
		</button>
	)
}
