---
import type { ReadablePage } from "../types";
import { formatDate } from "../utils";
import AISummary from "./AISummary.astro";

interface Props {
	article: ReadablePage;
	class?: string;
}
const { article, class: baseClasses = "" } = Astro.props;

function generateMetadataNuggets(article: ReadablePage): string[] {
	const articleHostname = new URL(article.url).hostname;
	const metadata = [
		article.author,
		article.published && formatDate(article.published),
		articleHostname,
	].filter((nugget) => !!nugget) as string[];
	return metadata;
}
const willGenerateSummary = Boolean(Astro.cookies.get("Authorization"));
const metadata = generateMetadataNuggets(article);
const lineLengths: Readonly<string[]> = [
	"w-[30ch]",
	"w-[45ch]",
	"w-[40ch]",
	"w-[42ch]",
];
---

<header class:list={["space-y-2", baseClasses]}>
	<h2 class="text-3xl font-transitional">
		<a href={article.url} class="hover:underline">{article.title}</a>
	</h2>
	<p class="text-sm">
		{metadata.join(" ãƒ» ")}
	</p>
	{
		willGenerateSummary && (
			<AISummary article={article} server:defer>
				<div class="flex flex-col gap-1" slot="fallback">
					{lineLengths.map((l) => (
						<div
							class:list={[
								"bg-slate-100",
								"dark:bg-gray-700",
								"rounded",
								"px-4",
								"py-2",
								"h-4",
								l,
								"animate-pulse",
							]}
						/>
					))}
				</div>
			</AISummary>
		)
	}
</header>
