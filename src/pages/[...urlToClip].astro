---
import createDomPurify from "dompurify";
import { JSDOM } from "jsdom";
import BasePage from "../layouts/BasePage.astro";
import { cache } from "../services/cache";
import { clip, convertHtmlToMarkdown } from "../services/clipper";
import { summarize } from "../services/summarizer";
import type { ReadablePage } from "../types";
import { isUrl } from "../utils";
export const prerender = false;
const DOMPurify = createDomPurify(new JSDOM("<!DOCTYPE html>").window);

const { urlToClip } = Astro.params;

function formatDate(date: Date | undefined): string {
	if (!date) {
		return "";
	}
	return Intl.DateTimeFormat("en-US", {
		year: "numeric",
		month: "2-digit",
		day: "2-digit",
	}).format(date);
}

function getFilename(title: string): string {
	return (
		title
			// make title windows-friendly
			.replace(":", "")
			.replace(/[/\\?%*|"<>]/g, "-")
			// get rid of spaces
			.replace(/\s+/g, "-")
			// lowercase is bestcase
			.toLocaleLowerCase()
	);
}

function generateObsidianUri(
	article: ReadablePage,
	folder = "Clippings/",
	vault = "",
): string {
	const today = formatDate(new Date());
	const fileName = getFilename(article.title);
	const vaultName = vault ? `&vault=${encodeURIComponent(vault)}` : "";

	// Check if there's an author and add brackets
	const authorBrackets = article.author ? `"[[${article.author}]]"` : "";
	const params = {
		category: '"[[Clippings]]"',
		author: authorBrackets,
		title: article.title,
		url: article.url,
		clipped: today,
		published: formatDate(article.published),
		topics: "",
		tags: article.tags.join(" "),
	};
	let fileContent = "---\n";
	fileContent += Object.entries(params)
		.map(([key, value]) => `${key}: ${value}`)
		.join("\n");
	fileContent += "\n---\n";
	if (article.summary) {
		fileContent += `\n${convertHtmlToMarkdown(article.summary)}\n`;
		fileContent += "\n---\n";
		fileContent += `\n# ${article.title}\n`;
	}
	fileContent += `\n${article.markdownContent}\n`;

	return `obsidian://new?file=${encodeURIComponent(folder + fileName)}&content=${encodeURIComponent(fileContent)}${vaultName}`;
}

if (!urlToClip || !isUrl(urlToClip)) {
	return Astro.redirect(`/404?url=${encodeURIComponent(urlToClip)}`);
}

let article = cache.getArticle(urlToClip);
if (!article) {
	article = await clip(new URL(urlToClip));
	cache.insertArticle(article);
}

const authCookie = Astro.cookies.get("Authorization");
if (!article.summary && authCookie) {
	const [model, apiKey] = (atob(authCookie.value) || "=").split("=");
	if (!model || !apiKey) {
		return;
	}
	article.summary = await summarize(article.textContent, model, apiKey);
	if (article.summary) {
		article.summary = DOMPurify.sanitize(article.summary);
		cache.addSummary(urlToClip, article.summary as string);
	}
}
---

<BasePage title={`${article.title} | yazzy`}>
	<div id="controls" class="flex gap-3 mb-4 items-center">
		<div
			class="border py-1 px-2 rounded-lg transition bg-transparent text-center"
		>
			<a href={generateObsidianUri(article)} class=""> Save to Obsidian </a>
		</div>
	</div>
	<header class="max-w-prose">
		<h2 class="text-3xl">
			<a href={article.url}>{article.title}</a>
		</h2>
		{article.author && <p class="text-2xl">{article.author}</p>}
	</header>
	<main>
		{
			article.summary && (
				<aside class="prose font-humanist mt-4">
					<h3>Summary</h3>
					<div set:html={article.summary} />
					<hr />
				</aside>
			)
		}
		<article
			class="prose lg:prose-xl font-humanist"
			set:html={article.htmlContent}
		/>
	</main>
</BasePage>
