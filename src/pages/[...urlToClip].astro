---
import { Icon } from "astro-icon/components";
import ArticleMap from "../components/ArticleMap.astro";
import Button from "../components/Button.astro";
import DownloadAs from "../components/DownloadAs.astro";
import BasePage from "../layouts/BasePage.astro";
import { cache } from "../services/cache";
import { clip, convertHtmlToMarkdown } from "../services/clipper";
import { summarize } from "../services/summarizer";
import type { ReadablePage } from "../types";
import { isUrl } from "../utils";
export const prerender = false;

const { urlToClip } = Astro.params;

function formatDate(date: Date | undefined): string {
	if (!date) {
		return "";
	}
	return date.toISOString().split("T")[0];
}

function getFilename(title: string): string {
	return (
		title
			// make title windows-friendly
			.replace(":", "")
			.replace(/[/\\?%*|"<>]/g, "-")
			// get rid of spaces
			.replace(/\s+/g, "-")
			// lowercase is bestcase
			.toLocaleLowerCase()
	);
}

function generateObsidianContents(article: ReadablePage): string {
	const today = formatDate(new Date());

	// Check if there's an author and add brackets
	const authorBrackets = article.author ? `"[[${article.author}]]"` : "";
	const params = {
		category: '"[[Clippings]]"',
		author: `${authorBrackets}`,
		title: `"${article.title}"`,
		url: article.url,
		clipped: `"${today}"`,
		published: `"${formatDate(article.published)}"`,
		tags: article.tags.map((t) => `"${t}"`).join(" "),
	};
	let fileContent = "---\n";
	fileContent += Object.entries(params)
		.map(([key, value]) => `${key}: ${value}`)
		.join("\n");
	fileContent += "\n---\n";
	fileContent += `\n# ${article.title}\n`;
	if (article.summary) {
		fileContent += "\n---\n";
		fileContent += "\n## Summary\n";
		fileContent += `\n${convertHtmlToMarkdown(article.summary)}\n`;
		fileContent += "\n---\n";
	}
	fileContent += `\n${article.markdownContent}\n`;

	return fileContent;
}

function generateObsidianUri(
	fileContent: string,
	title: string,
	folder = "Clippings/",
	vault = "",
): string {
	const fileName = getFilename(title);
	const vaultName = vault ? `&vault=${encodeURIComponent(vault)}` : "";
	return `obsidian://new?file=${encodeURIComponent(folder + fileName)}&content=${encodeURIComponent(fileContent)}${vaultName}`;
}

if (!urlToClip || !isUrl(urlToClip)) {
	return Astro.redirect(`/404?url=${encodeURIComponent(urlToClip)}`);
}

let article = cache.getArticle(urlToClip);
if (!article) {
	article = await clip(new URL(urlToClip));
	cache.insertArticle(article);
}

const authCookie = Astro.cookies.get("Authorization");
if (!article.summary && authCookie) {
	const [model, apiKey] = (atob(authCookie.value) || "=").split("=");
	if (!model || !apiKey) {
		return;
	}
	article.summary = await summarize(article.textContent, model, apiKey);
	if (article.summary) {
		cache.addSummary(urlToClip, article.summary as string);
	}
}
const plainTextSummary = article.summary
	? article.summary.replace(/<[^>]*>/g, "")
	: `${article.textContent.substring(0, 300)}…`;
const articleHostname = new URL(article.url).hostname;
const metadata = [
	article.author,
	article.published && formatDate(article.published),
	articleHostname,
].filter(Boolean);
const markdownContent = generateObsidianContents(article);
const obsidianUri = generateObsidianUri(markdownContent, article.title);
const plainTextContent = `${article.title}\n---\nSummary\n\n${plainTextSummary}\n---\n${article.textContent}`;
const buttonClasses = "";
---

<BasePage
	title={`${article.title} | ${articleHostname} | yazzy`}
	class="grid grid-cols-1 lg:grid-cols-[auto,1fr] gap-2 lg:gap-4"
>
	<Fragment slot="head">
		<meta name="description" content={plainTextSummary} />
		<meta
			property="og:title"
			content={`${article.title} | ${articleHostname} | yazzy`}
		/>
		<meta property="og:description" content={plainTextSummary} />
		<meta property="og:url" content={article.url} />
		<meta property="og:type" content="article" />
		{
			article.published && (
				<meta
					property="og:article:published_time"
					content={formatDate(article.published)}
				/>
			)
		}
		{
			article.author && (
				<meta property="og:article:author" content={article.author} />
			)
		}
	</Fragment>
	<aside
		class="flex lg:flex-col gap-3 items-center lg:col-start-1 lg:row-span-2 print:hidden"
	>
		<Button href={obsidianUri} title="Save to Obsidian" class={buttonClasses}>
			<Icon class="h-4" name="simple-icons/obsidian" />
		</Button>
		<DownloadAs
			contents={markdownContent}
			filename={`${getFilename(article.title)}.md`}
			title="Download as Markdown"
			class={buttonClasses}
		>
			<Icon name="refactoring-ui/book-closed" />
		</DownloadAs>
		<DownloadAs
			contents={plainTextContent}
			filename={`${getFilename(article.title)}.txt`}
			title="Download as plain text"
			class={buttonClasses}
		>
			<Icon name="refactoring-ui/inbox-download" />
		</DownloadAs>
		<ArticleMap class="lg:sticky lg:top-0 hidden lg:block" />
	</aside>
	<div class="lg:col-start-2 max-w-prose">
		<header class="border-b-2 border-neutral-400 pb-4">
			<h2 class="text-3xl font-transitional">
				<a href={article.url} class="hover:underline">{article.title}</a>
			</h2>
			<p class="text-sm mt-0.5">
				{metadata.join(" ・ ")}
			</p>
			{
				article.summary && (
					<aside class="prose font-humanist mt-4">
						<h3 class="mb-0 font-transitional">Summary</h3>
						<div set:html={article.summary} class="*:my-0" />
					</aside>
				)
			}
		</header>
		<main>
			<article
				class="prose dark:prose-invert lg:prose-xl font-humanist prose-headings:font-transitional prose-a:break-words prose-hr:my-4 prose-headings:mt-10 prose-headings:mb-0 !prose-img:max-w-[55ch] prose-img:mx-auto prose-img:rounded-lg"
				set:html={article.htmlContent}
			/>
		</main>
	</div>
</BasePage>
